// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique
  email        String   @unique
  name         String?  @db.String
  img          String?  @db.String
  access_token String?  @db.String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  joingrup    String?
  slug        String  
  title       String  @db.String
  description String? @db.String
  imageUrl    String? @db.String
  videoUrl    String? @db.String
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  orders      Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@unique([slug])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String? @db.String
  videoUrl    String? @db.String
  duration    Int?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Attachment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String @db.String

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Purchase {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  courseId String @db.ObjectId
  courses  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model Order {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String
  orderId String @unique

  courseId String @db.ObjectId
  courses  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId, orderId])
  @@index([courseId])
}

model UserProgress {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String?

  chapterId String?  @db.ObjectId
  Chapter   Chapter? @relation(fields: [chapterId], references: [id])

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}
